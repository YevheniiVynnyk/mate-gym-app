import { useMemo, useState } from "react";
import {
  Platform,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import { Calendar, Edit3, Save } from "lucide-react-native";
import DateTimePicker from "@react-native-community/datetimepicker";
import { useTranslation } from "react-i18next";
import { useTheme } from "@/contexts/ThemeContext";
import { CardUI, CardHeader, CardTitle } from "@/components/ui/CardUI";
import { TextInputUI } from "@/components/ui/TextInputUI";

export default function UserInfoSection({
  isEditing,
  setIsEditing,
  formDataUser,
  setFormDataUser,
  handleSaveUser,
  setFormDataUserWithAge,
}: any) {
  // üí° –í—ã–∑—ã–≤–∞–µ–º —Ö—É–∫ useTranslation –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ t
  const { t } = useTranslation();
  const [showDatePicker, setShowDatePicker] = useState(false);
  const { theme } = useTheme();

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–æ–∫ (lucide-react-native –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª–∞—Å—Å—ã)
  const getIconColor = (isActive = false) => {
    if (!isActive) {
      // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö/–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (muted-foreground)
      return theme === "ocean"
        ? "#336699"
        : theme === "dark"
          ? "#9ca3af"
          : "#9ca3af";
    }
    // –¶–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö/–æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (primary)
    return theme === "ocean"
      ? "#33c9ff"
      : theme === "dark"
        ? "#16A34A"
        : "#4ADE80";
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏ –¥–∞—Ç—ã
  const getDateBorderColor = () => {
    if (!isEditing) {
      // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞: border-gray-300 / dark:border-gray-600 / ocean:border-blue-800
      return "border-gray-300 dark:border-gray-600 ocean:border-blue-800";
    }
    // –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞: border-primary
    return "border-primary dark:border-primary-500 ocean:border-ocean-primary";
  };
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ "–ì–ì–ì–ì-–ú–ú-–î–î"
  const formatDate = (dateString: string) => {
    if (!dateString) return "";
    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ.
    // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return dateString; // –í–µ—Ä–Ω—É—Ç—å, –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞
      return date.toISOString().split("T")[0]; // "YYYY-MM-DD"
    } catch (e) {
      return dateString + e;
    }
  };
  // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  const onDateChange = (event: any, selectedDate: Date | undefined) => {
    // ... (–ª–æ–≥–∏–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –ø–∏–∫–µ—Ä–∞ –Ω–∞ Android –∏ iOS)
    if (Platform.OS === "android") {
      setShowDatePicker(false);
    }

    if (event.type === "set") {
      const currentDate = selectedDate || new Date();
      const formattedDate = currentDate.toISOString().split("T")[0]; // "YYYY-MM-DD"

      // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ, –ö–û–¢–û–†–ê–Ø –û–ë–ù–û–í–ò–¢ –ò birthday, –ò age
      setFormDataUserWithAge(formattedDate);
    } else if (event.type === "dismissed" && Platform.OS === "ios") {
      setShowDatePicker(false);
    }
  };
  // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, —Ç–µ–ø–µ—Ä—å –±–µ–∑ 'birthday' –≤ —Ü–∏–∫–ª–µ
  const textFields = [
    { placeholder: t("userInfo.placeholder.firstName"), key: "firstName" },
    { placeholder: t("userInfo.placeholder.lastName"), key: "lastName" },
    {
      placeholder: t("userInfo.placeholder.email"),
      key: "email",
      keyboardType: "email-address",
    },
    { placeholder: t("userInfo.placeholder.login"), key: "login" },
    {
      placeholder: t("userInfo.placeholder.phone"),
      key: "phoneNumber",
      keyboardType: "phone-pad",
    },
    {
      placeholder: t("userInfo.placeholder.age"),
      key: "age",
      keyboardType: "numeric",
    },
  ];
  // ‚úÖ –ù–û–í–û–ï –†–ï–®–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pickerDate —á–µ—Ä–µ–∑ useMemo
  const pickerDate = useMemo(() => {
    if (formDataUser.birthday) {
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ –µ—Å—Ç—å, –ø–∞—Ä—Å–∏–º –µ–µ –±–µ–∑ —É—á–µ—Ç–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
      try {
        const parts = formDataUser.birthday
          .split("-")
          .map((p: string) => parseInt(p, 10));
        // new Date(–≥–æ–¥, –º–µ—Å—è—Ü-1, –¥–µ–Ω—å)
        if (parts.length === 3 && !isNaN(parts[0])) {
          return new Date(parts[0], parts[1] - 1, parts[2]);
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:", e);
      }
    }
    // –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É,
    // –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∞ –Ω–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!
    // –í–∞–∂–Ω–æ: —ç—Ç–∞ –¥–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å".
    return new Date();
  }, [formDataUser.birthday]);

  return (
    <CardUI className="mb-4">
      <CardHeader className="flex-row justify-between items-center pb-0">
        <CardTitle className="text-lg font-semibold mb-0">
          {t("userInfo.header")}
        </CardTitle>
        <TouchableOpacity
          className="flex-row items-center"
          onPress={() => (isEditing ? handleSaveUser() : setIsEditing(true))}
        >
          {isEditing ? (
            <Save size={18} color={getIconColor(true)} />
          ) : (
            <Edit3 size={18} color={getIconColor(true)} />
          )}
          <Text className="ml-1 text-primary mb-2 dark:text-primary-500 ocean:text-ocean-primary">
            {isEditing ? t("userInfo.save") : t("userInfo.edit")}
          </Text>
        </TouchableOpacity>
      </CardHeader>
      <View className="p-4 pt-2">
        {textFields.map((item) => (
          <TextInputUI
            key={item.key}
            placeholder={item.placeholder}
            value={String((formDataUser as any)[item.key] || "")}
            editable={isEditing}
            keyboardType={item.keyboardType as any}
            onChangeText={(text) =>
              setFormDataUser((prev: any) => ({
                ...prev,
                [item.key]: item.key === "age" ? Number(text) : text,
              }))
            }
          />
        ))}

        {/* ‚úÖ –ë–ª–æ–∫ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Å DatePicker */}
        {/* ‚úÖ –ë–ª–æ–∫ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Å DatePicker */}
        <TouchableOpacity
          className={`flex-row justify-between items-center border rounded-md p-2 mb-2 ${getDateBorderColor()}`}
          onPress={() => isEditing && setShowDatePicker(true)}
          disabled={!isEditing}
        >
          <Text
            className={
              formDataUser.birthday
                ? "text-foreground dark:text-gray-100 ocean:text-ocean-foreground"
                : "text-muted-foreground dark:text-gray-400 ocean:text-ocean-foreground/80"
            }
          >
            {formDataUser.birthday
              ? `${t("userInfo.birthday")}: ${formatDate(formDataUser.birthday)}`
              : t("userInfo.birthday")}
          </Text>
          <Calendar size={18} color={getIconColor(isEditing)} />
        </TouchableOpacity>

        {/* ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏–∫–µ—Ä–∞ –¥–∞—Ç—ã */}
        {showDatePicker && (
          <DateTimePicker
            testID="dateTimePicker"
            value={pickerDate} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–µ–Ω–Ω–æ–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            mode="date"
            display={Platform.OS === "ios" ? "spinner" : "default"}
            onChange={onDateChange} // –í onDateChange –º—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 'set'
            maximumDate={new Date()}
          />
        )}
        {formDataUser.role === "CLIENT" && (
          <TextInputUI
            placeholder={t("userInfo.goals")}
            value={formDataUser.goals}
            editable={isEditing}
            onChangeText={(text) =>
              setFormDataUser({ ...formDataUser, goals: text })
            }
          />
        )}
      </View>
    </CardUI>
  );
}
