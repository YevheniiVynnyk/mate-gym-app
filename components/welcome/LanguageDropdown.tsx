import React, { useEffect } from "react";
import { Platform, View, StyleSheet } from "react-native";
import { useTranslation } from "react-i18next";
import { Picker } from "@react-native-picker/picker";

const languages = [
  // üá∫üá∏ –§–ª–∞–≥ –°–®–ê (English)
  { code: "en", label: "üá∫üá∏ English" },
  // üá∑üá∫ –§–ª–∞–≥ –†–æ—Å—Å–∏–∏ (–†—É—Å—Å–∫–∏–π)
  { code: "ru", label: "üá∑üá∫ –†—É—Å—Å–∫–∏–π" },
  // üá∫üá¶ –§–ª–∞–≥ –£–∫—Ä–∞–∏–Ω—ã (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)
  { code: "uk", label: "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" },
];

export default function LanguageDropdown() {
  const { i18n, t } = useTranslation();

  // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º i18n.language –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ useState,
  // —Ç–∞–∫ –∫–∞–∫ Picker –æ–±–Ω–æ–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ i18n.language –∏–∑–º–µ–Ω–∏—Ç—Å—è.

  const changeLanguage = (code: string) => {
    // üí° –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –º–µ–Ω—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ i18next
    i18n.changeLanguage(code);
    // UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ i18n.language –æ–±–Ω–æ–≤–∏—Ç—Å—è
  };

  return (
    <View style={[styles.container, styles.shadow]}>
      {/* Picker –Ω–∞ iOS –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É, —á–µ–º –Ω–∞ Android. 
        –ù–∞–º –Ω—É–∂–Ω–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞.
      */}
      <Picker
        selectedValue={i18n.language}
        onValueChange={(itemValue: string) => changeLanguage(itemValue)}
        // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º prompt, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–≤–æ–¥
        prompt={t("selectLanguage")}
        style={[
          styles.pickerBase,
          Platform.OS === "ios" && styles.pickerIOS,
          {
            color: "#3b82f6",
            // üí° –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø ANDROID:
            textAlign: "right", // –ò–ª–∏ 'center', —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—å—Å—è
          },
        ]}
        itemStyle={Platform.OS === "ios" ? styles.itemIOS : null}
        dropdownIconColor="#3b82f6"
      >
        {languages.map((lang) => (
          <Picker.Item
            key={lang.code}
            label={lang.label}
            value={lang.code}
            color="#3b82f6" // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
          />
        ))}
      </Picker>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    // üí° –í–µ—Ä–Ω—É—Ç—å —Ä–∞–±–æ—á–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    width: 150,
    height: 40,
    borderRadius: 8,
    overflow: "hidden",
    // üí° –£–±—Ä–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    backgroundColor: "white",
    borderWidth: 1,
    borderColor: "#d1d5db",
  },
  shadow: {
    // –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–Ω—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è NativeWind "shadow-xl"
    // –ü—Ä–∏–º–µ—Ä —Ç–µ–Ω–∏ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç shadow-xl –≤ NativeWind)
    ...Platform.select({
      ios: {
        shadowColor: "black",
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 4,
      },
    }),
  },
  pickerBase: {
    width: "100%",
    height: "100%",
  },
  pickerIOS: {
    transform: [{ scaleX: 0.9 }, { scaleY: 0.9 }],
    marginTop: -5,
    marginLeft: -5,
  },
  itemIOS: {
    fontSize: 14,
    height: 40,
  },
});
