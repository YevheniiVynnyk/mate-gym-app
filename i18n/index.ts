import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import AsyncStorage from "@react-native-async-storage/async-storage"; // –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
import * as Localization from "expo-localization"; // –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —è–∑—ã–∫–∞
import { Platform } from "react-native";

// üí° –ò–º–ø–æ—Ä—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
import en from "./locales/en.json";
import ru from "./locales/ru.json";
import uk from "./locales/uk.json";

// --- –ü–ª–∞–≥–∏–Ω—ã ---
// –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—ç–∫–µ–Ω–¥ –¥–ª—è React Native,
// –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏.
// –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ LanguageDetector.

const STORE_LANGUAGE_KEY = "settings.language";

// –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π LanguageDetector, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –∏–∑ AsyncStorage,
// –∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ (—á–µ—Ä–µ–∑ expo-localization).
const languageDetector = {
  type: "languageDetector",
  async: true,
  init: () => {},
  // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —è–∑—ã–∫ –∏–∑ AsyncStorage
  // @ts-ignore
  detect: async (callback: (lang: string) => void) => {
    try {
      const storedLanguage = await AsyncStorage.getItem(STORE_LANGUAGE_KEY);
      if (storedLanguage) {
        return callback(storedLanguage);
      }
    } catch (error) {
      console.log("Error reading language from storage", error);
    }
    const fallbackLanguage = "en"; // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ

    // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä ??
    const locale = Localization.getLocales()[0];
    const systemLanguageCandidate = locale.languageCode;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π 'en', –µ—Å–ª–∏ systemLanguageCandidate === null
    const systemLanguage = systemLanguageCandidate ?? fallbackLanguage;

    // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ (–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç–∞–º JSON)
    const supportedLanguages = Object.keys(resources);

    const initialLanguage = supportedLanguages.includes(systemLanguage)
      ? systemLanguage
      : fallbackLanguage;

    callback(initialLanguage);
  },

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ AsyncStorage
  // @ts-ignore
  cacheUserLanguage: async (language: string) => {
    try {
      await AsyncStorage.setItem(STORE_LANGUAGE_KEY, language);
    } catch (error) {
      console.log("Error saving language to storage", error);
    }
  },
};

// --- –†–µ—Å—É—Ä—Å—ã (–ü–µ—Ä–µ–≤–æ–¥—ã) ---
// –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ /i18n/locales/...
// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
// üí° –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
const resources = {
  en: { translation: en },
  ru: { translation: ru },
  uk: { translation: uk },
  // ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏
};

i18n
  // @ts-ignore
  .use(languageDetector) // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
  .use(initReactI18next) // –ü—Ä–∏–≤—è–∑–∫–∞ i18next –∫ React
  .init({
    resources,
    fallbackLng: "en", // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    debug: true, // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    interpolation: {
      escapeValue: false, // –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è React Native
    },
    // ns: ['translation'], // –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω (–º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –æ–¥–Ω–æ)
    // defaultNS: 'translation',
  });

export default i18n;
